{"version":3,"file":"kvapi-client.js","mappings":"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","sources":["webpack://KvapiClient/webpack/universalModuleDefinition","webpack://KvapiClient/./src/Api.ts","webpack://KvapiClient/./src/Encryption.ts","webpack://KvapiClient/./src/GenericApi.ts","webpack://KvapiClient/./src/errors/InvalidParamError.ts","webpack://KvapiClient/./src/errors/ServerError.ts","webpack://KvapiClient/./src/errors/index.ts","webpack://KvapiClient/./src/index.ts","webpack://KvapiClient/./src/specificApis/AppInfoApi.ts","webpack://KvapiClient/./src/specificApis/EntriesApi.ts","webpack://KvapiClient/./src/specificApis/SessionsApi.ts","webpack://KvapiClient/./src/specificApis/UsersApi.ts","webpack://KvapiClient/./src/specificApis/index.ts","webpack://KvapiClient/./src/utils/Deferred.ts","webpack://KvapiClient/./src/utils/index.ts","webpack://KvapiClient/webpack/bootstrap","webpack://KvapiClient/webpack/before-startup","webpack://KvapiClient/webpack/startup","webpack://KvapiClient/webpack/after-startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"KvapiClient\"] = factory();\n\telse\n\t\troot[\"KvapiClient\"] = factory();\n})(self, () => {\nreturn ","import * as Types from \"@wpazderski/kvapi-types\";\nimport { AppInfoApi } from \"./specificApis/AppInfoApi\";\nimport { EntriesApi } from \"./specificApis/EntriesApi\";\nimport { GenericApi, GenericApiOptions, RequestHeaders } from \"./GenericApi\";\nimport { SessionsApi } from \"./specificApis/SessionsApi\";\nimport { UsersApi } from \"./specificApis/UsersApi\";\nimport { Encryption } from \"./Encryption\";\n\ninterface UserPrivateData {\n    encryptionKey: string;\n}\n\nexport interface ApiOptions extends Omit<GenericApiOptions, \"commonHeadersProvider\"> {\n}\n\nexport class Api {\n    \n    private _appInfoApi: AppInfoApi;\n    private _publicEntriesApi: EntriesApi;\n    private _privateEntriesApi: EntriesApi;\n    private _sessionsApi: SessionsApi;\n    private _usersApi: UsersApi;\n    private _userSessionId: Types.data.session.Id | null = null;\n    private _user: Types.data.user.UserWithoutPassword | null = null;\n    private _userPasswordBasedEncryption: Encryption | null = null;\n    protected _genericApi: GenericApi;\n    \n    get appInfo(): AppInfoApi {\n        return this._appInfoApi;\n    }\n    \n    get publicEntries(): EntriesApi {\n        return this._publicEntriesApi;\n    }\n    \n    get privateEntries(): EntriesApi {\n        return this._privateEntriesApi;\n    }\n    \n    get sessions(): SessionsApi {\n        return this._sessionsApi;\n    }\n    \n    get users(): UsersApi {\n        return this._usersApi;\n    }\n    \n    get userSessionId(): Types.data.session.Id | null {\n        return this.parentApi ? this.parentApi.userSessionId : this._userSessionId;\n    }\n    private set userSessionId(sessionId: Types.data.session.Id | null) {\n        if (this.parentApi) {\n            this.parentApi.userSessionId = sessionId;\n        }\n        else {\n            this._userSessionId = sessionId;\n        }\n    }\n    \n    get user(): Types.data.user.UserWithoutPassword | null {\n        return this.parentApi ? this.parentApi.user : this._user;\n    }\n    private set user(userId: Types.data.user.UserWithoutPassword | null) {\n        if (this.parentApi) {\n            this.parentApi.user = userId;\n        }\n        else {\n            this._user = userId;\n        }\n    }\n    \n    get userPasswordBasedEncryption(): Encryption | null {\n        return this.parentApi ? this.parentApi.userPasswordBasedEncryption : this._userPasswordBasedEncryption;\n    }\n    private set userPasswordBasedEncryption(userPasswordBasedEncryption: Encryption | null) {\n        if (this.parentApi) {\n            this.parentApi.userPasswordBasedEncryption = userPasswordBasedEncryption;\n        }\n        else {\n            this._userPasswordBasedEncryption = userPasswordBasedEncryption;\n        }\n    }\n    \n    get genericApi(): GenericApi {\n        return this._genericApi;\n    }\n    \n    constructor(protected baseUrl: string, private options?: Partial<ApiOptions>, private parentApi: Api | null = null) {\n        this._genericApi = new GenericApi(\n            baseUrl,\n            {\n                ...this.options,\n                commonHeadersProvider: () => {\n                    const headers: RequestHeaders = {};\n                    if (this.userSessionId !== null) {\n                        headers[\"kvapi-session-id\"] = this.userSessionId;\n                    }\n                    return headers;\n                },\n            },\n            parentApi ? parentApi.genericApi : null,\n        );\n        this._appInfoApi = new AppInfoApi(this.genericApi);\n        this._publicEntriesApi = new EntriesApi(this.genericApi, \"public\");\n        this._privateEntriesApi = new EntriesApi(this.genericApi, \"private\");\n        this._sessionsApi = new SessionsApi(\n            this.genericApi,\n            {\n                onSessionStarted: (response, userPassword) => this.onSessionStarted(response, userPassword),\n                onSessionTerminated: () => this.onSessionTerminated(),\n            },\n        );\n        this._usersApi = new UsersApi(\n            this.genericApi,\n            {\n                onBeforeUserUpdated: async (userId, request) => this.onBeforeUserUpdated(userId, request),\n                onUserUpdated: async (user, plainPassword) => this.onUserUpdated(user, plainPassword),\n            },\n        );\n    }\n    \n    private async onSessionStarted(createSessionResponse: Types.api.sessions.CreateSessionResponse, userPassword: Types.data.user.PlainPassword): Promise<void> {\n        this.userSessionId = createSessionResponse.id;\n        this.user = createSessionResponse.user;\n        if (!this.genericApi.isE2EEncrypted()) {\n            return;\n        }\n        const passwordBasedKey = await Encryption.generateKeyFromPassword(userPassword);\n        const passwordBasedEncryption = new Encryption(passwordBasedKey);\n        this.userPasswordBasedEncryption = passwordBasedEncryption;\n        let encryptionKey: CryptoKey;\n        if (createSessionResponse.user.privateData) {\n            const privateData: UserPrivateData = JSON.parse(await passwordBasedEncryption.decrypt(createSessionResponse.user.privateData));\n            encryptionKey = await Encryption.importKey(privateData.encryptionKey);\n        }\n        else {\n            encryptionKey = await Encryption.generateRandomKey();\n            const privateData: UserPrivateData = {\n                encryptionKey: await Encryption.exportKey(encryptionKey),\n            };\n            const privateDataStr = await passwordBasedEncryption.encrypt(JSON.stringify(privateData)) as Types.data.user.PrivateData;\n            await this.users.update(createSessionResponse.user.id, { privateData: privateDataStr });\n        }\n        this.genericApi.maybeInitEncryption(encryptionKey);\n    }\n    \n    private async onSessionTerminated(): Promise<void> {\n        this.userSessionId = null;\n        this.user = null;\n        this.userPasswordBasedEncryption = null;\n        this.genericApi.disposeEncryption();\n    }\n    \n    private async onBeforeUserUpdated(userId: Types.data.user.Id, request: Types.api.users.UpdateUserRequest): Promise<void> {\n        if (!this.user) {\n            return;\n        }\n        if (userId !== this.user.id) {\n            return;\n        }\n        if (!this.genericApi.isE2EEncrypted()) {\n            return;\n        }\n        if (!request.password) {\n            return;\n        }\n        \n        // Updating own password with e2ee enabled requires updating privateData\n        const newPassword = request.password;\n        const newPasswordBasedKey = await Encryption.generateKeyFromPassword(newPassword);\n        const oldPasswordBasedEncryption = this.userPasswordBasedEncryption!;\n        const newPasswordBasedEncryption = new Encryption(newPasswordBasedKey);\n        let privateData: UserPrivateData;\n        if (request.privateData) {\n            try {\n                privateData = JSON.parse(await newPasswordBasedEncryption.decrypt(request.privateData));\n            }\n            catch {\n                privateData = JSON.parse(await oldPasswordBasedEncryption.decrypt(request.privateData));\n            }\n        }\n        else {\n            privateData = JSON.parse(await oldPasswordBasedEncryption.decrypt(this.user.privateData!));\n        }\n        const privateDataStr = await newPasswordBasedEncryption.encrypt(JSON.stringify(privateData)) as Types.data.user.PrivateData;\n        request.privateData = privateDataStr;\n    }\n    \n    private async onUserUpdated(user: Types.data.user.UserPublic | Types.data.user.UserWithoutPassword, plainPassword?: Types.data.user.PlainPassword): Promise<void> {\n        if (!this.user) {\n            return;\n        }\n        if (user.id !== this.user.id) {\n            return;\n        }\n        if (this.genericApi.isE2EEncrypted() && plainPassword) {\n            const newPasswordBasedKey = await Encryption.generateKeyFromPassword(plainPassword);\n            const newPasswordBasedEncryption = new Encryption(newPasswordBasedKey);\n            this.userPasswordBasedEncryption = newPasswordBasedEncryption;\n        }\n        this.user = {\n            ...this.user,\n            ...user,\n        };\n    }\n    \n    createBatchedApi(): Api {\n        return new Api(this.baseUrl, { ...this.options, batchMode: true }, this);\n    }\n    \n    executeBatch(): Promise<void> {\n        return this.genericApi.executeBatch();\n    }\n    \n}\n","export interface EncryptedData {\n    data: string;\n    iv: string;\n}\n\nexport class Encryption {\n    \n    static async sha512<T extends string>(text: T): Promise<T> {\n        const arrBuf = await crypto.subtle.digest(\"SHA-512\", new TextEncoder().encode(text));\n        const arr = [...new Uint8Array(arrBuf)];\n        return arr.map(x => x.toString(16).padStart(2, \"0\")).join(\"\") as T;\n    }\n    \n    private static uint8ArrayToString(arr: Uint8Array): string {\n        return [...arr].map(x => String.fromCharCode(x)).join(\"\");\n    }\n    \n    private static stringToUint8Array(str: string): Uint8Array {\n        return Uint8Array.from(str.split(\"\").map(chr => chr.charCodeAt(0)));\n    }\n    \n    private static uint16ArrayToString(arr: Uint16Array): string {\n        return [...arr].map(x => String.fromCharCode(x)).join(\"\");\n    }\n    \n    private static stringToUint16Array(str: string): Uint16Array {\n        return Uint16Array.from(str.split(\"\").map(chr => chr.charCodeAt(0)));\n    }\n    \n    static async exportKey(key: CryptoKey): Promise<string> {\n        const arrBuff = await crypto.subtle.exportKey(\"raw\", key);\n        const str = this.uint8ArrayToString(new Uint8Array(arrBuff));\n        const safeStr = btoa(str);\n        return safeStr;\n    }\n    \n    static async importKey(str: string): Promise<CryptoKey> {\n        const uint8Array = new Uint8Array(atob(str).split(\"\").map(x => x.charCodeAt(0)));\n        const key = await crypto.subtle.importKey(\n            \"raw\",\n            uint8Array,\n            {\n                name: \"AES-GCM\",\n            },\n            true,\n            [ \"encrypt\", \"decrypt\" ]);\n        return key;\n    }\n    \n    static async generateRandomKey(): Promise<CryptoKey> {\n        const key = await crypto.subtle.generateKey(\n            {\n                name: \"AES-GCM\",\n                length: 256,\n            },\n            true,\n            [\"encrypt\", \"decrypt\"]\n        );\n        return key;\n    }\n    \n    static async generateKeyFromPassword(password: string): Promise<CryptoKey> {\n        const passwordData = new TextEncoder().encode(password);\n        const hash = await crypto.subtle.digest(\"SHA-256\", passwordData);\n        const key = await crypto.subtle.importKey(\n            \"raw\",\n            hash,\n            {\n                name: \"AES-GCM\",\n            },\n            true,\n            [ \"encrypt\", \"decrypt\" ]);\n        return key;\n    }\n    \n    \n    \n    \n    \n    constructor(private key: CryptoKey) {\n    }\n    \n    async encrypt(data: string): Promise<string> {\n        const encryptedData = await this.encryptCore(data);\n        return JSON.stringify(encryptedData);\n    }\n    \n    async decrypt(data: string): Promise<string> {\n        const encryptedData: EncryptedData = JSON.parse(data);\n        return this.decryptCore(encryptedData);\n    }\n    \n    private async encryptCore(data: string): Promise<EncryptedData> {\n        const iv = crypto.getRandomValues(new Uint8Array(12));\n        const encryptedData = await crypto.subtle.encrypt(\n            {\n                name: \"AES-GCM\",\n                iv: iv,\n            },\n            this.key,\n            Encryption.stringToUint16Array(data),\n        );\n        return {\n            data: btoa(Encryption.uint8ArrayToString(new Uint8Array(encryptedData))),\n            iv: btoa(Encryption.uint8ArrayToString(iv)),\n        };\n    }\n    \n    private async decryptCore(encryptedData: EncryptedData): Promise<string> {\n        const data = await crypto.subtle.decrypt(\n            {\n                name: \"AES-GCM\",\n                iv: Encryption.stringToUint8Array(atob(encryptedData.iv)),\n            },\n            this.key,\n            Encryption.stringToUint8Array(atob(encryptedData.data)),\n        );\n        return Encryption.uint16ArrayToString(new Uint16Array(data));\n    }\n    \n    \n    \n    \n    \n    \n    async encrypt16(data: string): Promise<string> {\n        const encryptedData = await this.encryptCore16(data);\n        return JSON.stringify(encryptedData);\n    }\n    \n    async decrypt16(data: string): Promise<string> {\n        const encryptedData: EncryptedData = JSON.parse(data);\n        return this.decryptCore16(encryptedData);\n    }\n    \n    private async encryptCore16(data: string): Promise<EncryptedData> {\n        const iv = crypto.getRandomValues(new Uint16Array(6));\n        const encryptedData = await crypto.subtle.encrypt(\n            {\n                name: \"AES-GCM\",\n                iv: iv,\n            },\n            this.key,\n            Encryption.stringToUint16Array(data),\n        );\n        return {\n            data: Encryption.uint16ArrayToString(new Uint16Array(encryptedData)),\n            iv: Encryption.uint16ArrayToString(iv),\n        };\n    }\n    \n    private async decryptCore16(encryptedData: EncryptedData): Promise<string> {\n        const data = await crypto.subtle.decrypt(\n            {\n                name: \"AES-GCM\",\n                iv: Encryption.stringToUint16Array(encryptedData.iv),\n            },\n            this.key,\n            Encryption.stringToUint16Array(encryptedData.data),\n        );\n        return Encryption.uint16ArrayToString(new Uint16Array(data));\n    }\n    \n}\n","import * as Types from \"@wpazderski/kvapi-types\";\nimport { Deferred } from \"./utils/Deferred\";\nimport { ServerError } from \"./errors/ServerError\";\nimport { Encryption } from \"./Encryption\";\n\nexport type RequestHeaders = { [key: string]: string };\n\ninterface BatchedRequestEx extends Types.api.batch.BatchedRequest {\n    deferred: Deferred<any>;\n}\n\nexport interface GenericApiOptions {\n    batchMode: boolean;\n    e2ee: boolean;\n    commonHeadersProvider: () => RequestHeaders;\n    onRequestError: ((error: Error) => void) | null;\n}\n\nexport class GenericApi {\n    \n    private options: GenericApiOptions;\n    private currentBatchedRequestsEx: (BatchedRequestEx | Deferred<BatchedRequestEx | null>)[] = [];\n    private _encryption: Encryption | null = null;\n    \n    private get encryption(): Encryption | null {\n        return this.parentGenericApi ? this.parentGenericApi.encryption : this._encryption;\n    }\n    private set encryption(encryption: Encryption | null) {\n        if (this.parentGenericApi) {\n            this.parentGenericApi.encryption = encryption;\n        }\n        else {\n            this._encryption = encryption;\n        }\n    }\n    \n    constructor(private baseUrl: string, options?: Partial<GenericApiOptions>, private parentGenericApi: GenericApi | null = null) {\n        this.options = {\n            batchMode: false,\n            e2ee: false,\n            commonHeadersProvider: () => ({}),\n            onRequestError: null,\n            ...options,\n        };\n        if (this.baseUrl && !this.baseUrl.endsWith(\"/\")) {\n            this.baseUrl += \"/\";\n        }\n    }\n    \n    isE2EEncrypted(): boolean {\n        return this.options.e2ee;\n    }\n    \n    maybeInitEncryption(encryptionKey: CryptoKey): void {\n        if (!this.options.e2ee || this.encryption) {\n            return;\n        }\n        this.encryption = new Encryption(encryptionKey);\n    }\n    \n    disposeEncryption(): void {\n        this.encryption = null;\n    }\n    \n    async maybeEncrypt<T extends string>(data: T, entryAccess?: Types.data.entry.EntryAccess): Promise<T> {\n        if (!this.shouldUseEncryption(entryAccess)) {\n            return data;\n        }\n        const encrypted = await this.encryption!.encrypt(data);\n        return encrypted as T;\n    }\n    \n    async maybeDecrypt<T extends string>(data: T, entryAccess?: Types.data.entry.EntryAccess): Promise<T> {\n        if (!this.shouldUseEncryption(entryAccess)) {\n            return data;\n        }\n        const decrypted = await this.encryption!.decrypt(data);\n        return decrypted as T;\n    }\n    \n    private shouldUseEncryption(entryAccess?: Types.data.entry.EntryAccess): boolean {\n        if (!this.options.e2ee) {\n            return false;\n        }\n        if (entryAccess === \"public\") {\n            return false;\n        }\n        if (!this.encryption && GenericApi) {\n        }\n        if (!this.encryption) {\n            throw new Error(\"Encryption not initialized\");\n        }\n        return true;\n    }\n    \n    get<TResponse>(url: string, canBeBatched: boolean = true): Promise<TResponse> {\n        return this.request(\"get\", url, undefined, canBeBatched);\n    }\n    \n    post<TRequest, TResponse>(url: string, data: TRequest, canBeBatched: boolean = true): Promise<TResponse> {\n        return this.request(\"post\", url, data, canBeBatched);\n    }\n    \n    patch<TRequest, TResponse>(url: string, data: TRequest, canBeBatched: boolean = true): Promise<TResponse> {\n        return this.request(\"patch\", url, data, canBeBatched);\n    }\n    \n    put<TRequest, TResponse>(url: string, data: TRequest, canBeBatched: boolean = true): Promise<TResponse> {\n        return this.request(\"put\", url, data, canBeBatched);\n    }\n    \n    delete<TRequest, TResponse>(url: string, data: TRequest, canBeBatched: boolean = true): Promise<TResponse> {\n        return this.request(\"delete\", url, data, canBeBatched);\n    }\n    \n    request<TRequest, TResponse>(method: Types.api.request.Method, url: string, data?: TRequest, canBeBatched: boolean = true): Promise<TResponse> {\n        if (this.options.batchMode && canBeBatched) {\n            const deferred = new Deferred<TResponse>();\n            this.currentBatchedRequestsEx.push({ method, url, data, deferred });\n            return deferred.getPromise();\n        }\n        else {\n            return this.requestCore(method, url, data);\n        }\n    }\n    \n    private async requestCore<TRequest, TResponse>(method: Types.api.request.Method, url: string, data?: TRequest): Promise<TResponse> {\n        const headers: RequestHeaders = {\n            ...this.options.commonHeadersProvider(),\n            \"Content-Type\": \"application/json\",\n        };\n        try {\n            const response = await fetch(this.getFullUrl(url), {\n                method: method.toUpperCase(),\n                headers,\n                body: data !== undefined ? JSON.stringify(data) : null,\n            });\n            if (response.status === 200) {\n                return await response.json();\n            }\n            else {\n                let details: any;\n                try {\n                    details = await response.json();\n                }\n                catch {}\n                throw new ServerError(response.status, response.statusText, details);\n            }\n        }\n        catch (error) {\n            if (error instanceof Error && this.options.onRequestError) {\n                try {\n                    this.options.onRequestError(error);\n                }\n                catch (callbackError) {\n                    console.error(callbackError);\n                }\n            }\n            throw error;\n        }\n    }\n    \n    private getFullUrl(url: string): string {\n        if (url.startsWith(\"/\")) {\n            url = url.substring(1);\n        }\n        return this.baseUrl + url;\n    }\n    \n    async executeBatch(): Promise<void> {\n        if (this.currentBatchedRequestsEx.length === 0) {\n            return;\n        }\n        \n        const batchedRequestsEx = this.currentBatchedRequestsEx;\n        this.currentBatchedRequestsEx = [];\n        const batchedRequestsExResolved: BatchedRequestEx[] = [];\n        for (const batchedRequestEx of batchedRequestsEx) {\n            if (batchedRequestEx instanceof Deferred) {\n                const req = await batchedRequestEx.getPromise();\n                if (req !== null) {\n                    batchedRequestsExResolved.push(req);\n                }\n            }\n            else {\n                batchedRequestsExResolved.push(batchedRequestEx);\n            }\n        }\n        const batchedRequests = batchedRequestsExResolved.map(request => (<Types.api.batch.BatchedRequest>{\n            method: request.method,\n            url: request.url,\n            data: request.data,\n        }));\n        \n        const data: Types.api.batch.Request = {\n            batchedRequests,\n        };\n        const result = await this.requestCore(\"post\", \"batch\", data) as Types.api.batch.Response;\n        for (let i = 0; i < batchedRequests.length; ++i) {\n            try {\n                const request = batchedRequestsExResolved[i]!;\n                const response = result.batchedResponses[i]!;\n                if (response.statusCode === 200) {\n                    request.deferred.resolve(JSON.parse(response.response));\n                }\n                else {\n                    let details: any;\n                    try {\n                        details = JSON.parse(response.response);\n                    }\n                    catch {}\n                    request.deferred.reject(new ServerError(response.statusCode, response.statusText, details));\n                }\n            }\n            catch (err) {\n                console.error(err);\n            }\n        }\n    }\n    \n    async buildRequestAsynchronously<T>(builder: () => Promise<() => Promise<T>>): Promise<T> {\n        if (!this.options.batchMode) {\n            return (await builder())();\n        }\n        const deferred = new Deferred<BatchedRequestEx | null>();\n        this.currentBatchedRequestsEx.push(deferred);\n        try {\n            const requestScheduler = await builder();\n            const requestPromise = requestScheduler();\n            const idx = this.currentBatchedRequestsEx.findIndex(req => req && !(req instanceof Deferred) && req.deferred.getPromise() === requestPromise);\n            if (idx < 0) {\n                throw new Error(\"buildRequestAsynchronously: no batched request\");\n            }\n            const batchedRequest = this.currentBatchedRequestsEx[idx];\n            if (!batchedRequest || batchedRequest instanceof Deferred) {\n                throw new Error(\"buildRequestAsynchronously: unexpected batched request object\");\n            }\n            this.currentBatchedRequestsEx.splice(idx, 1);\n            deferred.resolve(batchedRequest);\n            return requestPromise;\n        }\n        catch (err) {\n            deferred.resolve(null);\n            throw err;\n        }\n    }\n    \n    getCurrentBatchSize(): number {\n        return this.currentBatchedRequestsEx.length;\n    }\n    \n}\n","export class InvalidParamError extends Error {\n    \n    constructor(paramName: string) {\n        super(`Invalid param: ${paramName}`);\n    }\n    \n}\n","export class ServerError extends Error {\n    \n    static getErrorMessage(statusCode: number, statusText: string, details: any): string {\n        let msg = `Server error: ${statusCode} ${statusText}`;\n        if (details) {\n            msg += \" (\";\n            if (typeof(details) === \"object\") {\n                msg += JSON.stringify(details);\n            }\n            else {\n                msg += details;\n            }\n            msg += \")\";\n        }\n        return msg;\n    }\n    \n    constructor(protected statusCode: number, protected statusText: string, protected details: any) {\n        super(ServerError.getErrorMessage(statusCode, statusText, details));\n    }\n    \n    getStatusCode(): number {\n        return this.statusCode;\n    }\n    \n    getStatusMessage(): string {\n        return this.statusText;\n    }\n    \n    getDetails(): any {\n        return this.details;\n    }\n    \n}\n","export * from \"./InvalidParamError\";\nexport * from \"./ServerError\";\n","export * as errors from \"./errors\";\nexport * as specificApis from \"./specificApis\";\nexport * as utils from \"./utils\";\nexport * from \"./Api\";\nexport * from \"./Encryption\";\nexport * from \"./GenericApi\";\n","import * as Types from \"@wpazderski/kvapi-types\";\nimport { GenericApi } from \"../GenericApi\";\n\nexport class AppInfoApi {\n    \n    constructor(private genericApi: GenericApi) {\n    }\n    \n    async get(): Promise<Types.api.appInfo.GetAppInfoResponse> {\n        const response: Types.api.appInfo.GetAppInfoResponse = await this.genericApi.get(\"app-info\");\n        return response;\n    }\n    \n}\n","import * as Types from \"@wpazderski/kvapi-types\";\nimport { InvalidParamError } from \"../errors\";\nimport { GenericApi } from \"../GenericApi\";\n\nexport class EntriesApi {\n    \n    constructor(private genericApi: GenericApi, private entryAccess: Types.data.entry.EntryAccess) {\n    }\n    \n    async getAll(): Promise<Types.data.entry.KeyValueMap> {\n        const response: Types.api.entries.GetEntriesResponse = await this.genericApi.get(`${this.entryAccess}-entries`);\n        const entries: Types.data.entry.KeyValueMap = {};\n        for (const key in response.entries) {\n            let value = (response.entries as any)[key];\n            value = await this.genericApi.maybeDecrypt(value, this.entryAccess);\n            (entries as any)[key] = value;\n        }\n        return entries;\n    }\n    \n    async get(key: Types.data.entry.Key): Promise<Types.data.entry.Value> {\n        key = key.trim() as Types.data.entry.Key;\n        if (!key) {\n            throw new InvalidParamError(\"key\");\n        }\n        const response: Types.api.entries.GetEntryResponse = await this.genericApi.get(`${this.entryAccess}-entries/${key}`);\n        return this.genericApi.maybeDecrypt(response.value, this.entryAccess);\n    }\n    \n    async set(key: Types.data.entry.Key, value: Types.data.entry.Value): Promise<void> {\n        key = key.trim() as Types.data.entry.Key;\n        if (!key) {\n            throw new InvalidParamError(\"key\");\n        }\n        await this.genericApi.buildRequestAsynchronously(async () => {\n            value = await this.genericApi.maybeEncrypt(value, this.entryAccess);\n            const request: Types.api.entries.CreateOrUpdateEntryRequest = { value };\n            return () => this.genericApi.put(`${this.entryAccess}-entries/${key}`, request);\n        });\n    }\n    \n    async delete(key: Types.data.entry.Key): Promise<void> {\n        key = key.trim() as Types.data.entry.Key;\n        if (!key) {\n            throw new InvalidParamError(\"key\");\n        }\n        await this.genericApi.delete(`${this.entryAccess}-entries/${key}`, {});\n    }\n    \n}\n","import * as Types from \"@wpazderski/kvapi-types\";\nimport { Encryption } from \"../Encryption\";\nimport { GenericApi } from \"../GenericApi\";\n\nexport interface SessionApiOptions {\n    onSessionStarted: (response: Types.api.sessions.CreateSessionResponse, userPassword: Types.data.user.PlainPassword) => Promise<void>;\n    onSessionTerminated: () => Promise<void>;\n}\n\nexport class SessionsApi {\n    \n    constructor(private genericApi: GenericApi, private options: SessionApiOptions) {\n    }\n    \n    async create(userLogin: Types.data.user.Login, userPassword: Types.data.user.PlainPassword): Promise<Types.api.sessions.CreateSessionResponse> {\n        const plainUserPassword = userPassword;\n        userPassword = await Encryption.sha512(userPassword);\n        const request: Types.api.sessions.CreateSessionRequest = { userLogin, userPassword };\n        const response: Types.api.sessions.CreateSessionResponse = await this.genericApi.post(\"sessions\", request, false);\n        if (response && response.id) {\n            await this.options.onSessionStarted(response, plainUserPassword);\n        }\n        return response;\n    }\n    \n    async update(): Promise<void> {\n        await this.genericApi.patch<Types.api.sessions.UpdateSessionRequest, Types.api.sessions.UpdateSessionResponse>(\"sessions\", {}, false);\n    }\n    \n    async delete(): Promise<void> {\n        await this.genericApi.delete<Types.api.sessions.DeleteSessionRequest, Types.api.sessions.DeleteSessionResponse>(\"sessions\", {}, false);\n        await this.options.onSessionTerminated();\n    }\n    \n}\n","import * as Types from \"@wpazderski/kvapi-types\";\nimport { Encryption } from \"../Encryption\";\nimport { InvalidParamError } from \"../errors\";\nimport { GenericApi } from \"../GenericApi\";\n\nexport interface UsersApiOptions {\n    onBeforeUserUpdated: (userId: Types.data.user.Id, request: Types.api.users.UpdateUserRequest) => Promise<void>;\n    onUserUpdated: (user: Types.data.user.UserPublic | Types.data.user.UserWithoutPassword, plainPassword?: Types.data.user.PlainPassword) => Promise<void>;\n}\n\nexport class UsersApi {\n    \n    constructor(private genericApi: GenericApi, private options: UsersApiOptions) {\n    }\n    \n    async getAll(): Promise<Types.data.user.UsersPublic> {\n        const result: Types.api.users.GetUsersResponse = await this.genericApi.get(\"users\");\n        return result.users;\n    }\n    \n    async get(userId: Types.data.user.Id): Promise<Types.data.user.UserPublic | Types.data.user.UserWithoutPassword> {\n        userId = userId.trim() as Types.data.user.Id;\n        if (!userId) {\n            throw new InvalidParamError(\"userId\");\n        }\n        const result: Types.api.users.GetUserResponse = await this.genericApi.get(`users/${userId}`);\n        return result.user;\n    }\n    \n    async create(request: Types.api.users.CreateUserRequest): Promise<Types.data.user.UserPublic> {\n        request = {\n            login: request.login,\n            password: await Encryption.sha512(request.password),\n            role: request.role,\n        };\n        const result: Types.api.users.CreateUserResponse = await this.genericApi.post(\"users\", request);\n        return result.user;\n    }\n    \n    async update(userId: Types.data.user.Id, request: Types.api.users.UpdateUserRequest): Promise<Types.data.user.UserPublic | Types.data.user.UserWithoutPassword> {\n        userId = userId.trim() as Types.data.user.Id;\n        if (!userId) {\n            throw new InvalidParamError(\"userId\");\n        }\n        const plainPassword = request.password;\n        const result: Types.api.users.UpdateUserResponse = await this.genericApi.buildRequestAsynchronously(async () => {\n            request = { ...request };\n            await this.options.onBeforeUserUpdated(userId, request);\n            if (request.password) {\n                request.password = await Encryption.sha512(request.password);\n            }\n            return () => this.genericApi.patch(`users/${userId}`, request);\n        });\n        if (\"privateData\" in result.user) {\n            this.options.onUserUpdated(\n                {\n                    id: userId,\n                    login: result.user.login,\n                    role: result.user.role,\n                    lastPasswordUpdateTimestamp: result.user.lastPasswordUpdateTimestamp,\n                    privateData: result.user.privateData,\n                },\n                plainPassword,\n            );\n        }\n        else {\n            this.options.onUserUpdated({\n                id: userId,\n                login: result.user.login,\n                role: result.user.role,\n            });\n        }\n        return result.user;\n    }\n    \n    async delete(userId: Types.data.user.Id): Promise<void> {\n        userId = userId.trim() as Types.data.user.Id;\n        if (!userId) {\n            throw new InvalidParamError(\"userId\");\n        }\n        await this.genericApi.delete<Types.api.users.DeleteUserRequest, Types.api.users.DeleteUserResponse>(`users/${userId}`, {});\n    }\n    \n}\n","export * from \"./AppInfoApi\";\nexport * from \"./EntriesApi\";\nexport * from \"./SessionsApi\";\nexport * from \"./UsersApi\";\n","export class Deferred<T> {\n    \n    private promise: Promise<T>;\n    // @ts-ignore\n    resolve: (value: T) => void;\n    // @ts-ignore\n    reject: (reason: any) => void;\n    \n    constructor() {\n        this.promise = new Promise<T>((resolve, reject) => {\n            this.resolve = resolve;\n            this.reject = reject;\n        });\n    }\n    \n    getPromise(): Promise<T> {\n        return this.promise;\n    }\n    \n}\n","export * from \"./Deferred\";\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(\"./src/index.ts\");\n",""],"names":[],"sourceRoot":""}